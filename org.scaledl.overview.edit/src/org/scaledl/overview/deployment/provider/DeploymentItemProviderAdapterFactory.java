/**
 */
package org.scaledl.overview.deployment.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.scaledl.overview.deployment.util.DeploymentAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DeploymentItemProviderAdapterFactory extends DeploymentAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DeploymentItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.Deployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentItemProvider deploymentItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.Deployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentAdapter() {
		if (deploymentItemProvider == null) {
			deploymentItemProvider = new DeploymentItemProvider(this);
		}

		return deploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.ServiceDeployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceDeploymentItemProvider serviceDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.ServiceDeployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceDeploymentAdapter() {
		if (serviceDeploymentItemProvider == null) {
			serviceDeploymentItemProvider = new ServiceDeploymentItemProvider(this);
		}

		return serviceDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.GenericDeployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericDeploymentItemProvider genericDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.GenericDeployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericDeploymentAdapter() {
		if (genericDeploymentItemProvider == null) {
			genericDeploymentItemProvider = new GenericDeploymentItemProvider(this);
		}

		return genericDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.RuntimeDeployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuntimeDeploymentItemProvider runtimeDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.RuntimeDeployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuntimeDeploymentAdapter() {
		if (runtimeDeploymentItemProvider == null) {
			runtimeDeploymentItemProvider = new RuntimeDeploymentItemProvider(this);
		}

		return runtimeDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.ComputingEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingEnvironmentItemProvider computingEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.ComputingEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingEnvironmentAdapter() {
		if (computingEnvironmentItemProvider == null) {
			computingEnvironmentItemProvider = new ComputingEnvironmentItemProvider(this);
		}

		return computingEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.ClusteredComputingEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusteredComputingEnvironmentItemProvider clusteredComputingEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.ClusteredComputingEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusteredComputingEnvironmentAdapter() {
		if (clusteredComputingEnvironmentItemProvider == null) {
			clusteredComputingEnvironmentItemProvider = new ClusteredComputingEnvironmentItemProvider(this);
		}

		return clusteredComputingEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.ScalableComputingEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalableComputingEnvironmentItemProvider scalableComputingEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.ScalableComputingEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalableComputingEnvironmentAdapter() {
		if (scalableComputingEnvironmentItemProvider == null) {
			scalableComputingEnvironmentItemProvider = new ScalableComputingEnvironmentItemProvider(this);
		}

		return scalableComputingEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.ScalingManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalingManagerItemProvider scalingManagerItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.ScalingManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalingManagerAdapter() {
		if (scalingManagerItemProvider == null) {
			scalingManagerItemProvider = new ScalingManagerItemProvider(this);
		}

		return scalingManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.ScalingPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalingPolicyItemProvider scalingPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.ScalingPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalingPolicyAdapter() {
		if (scalingPolicyItemProvider == null) {
			scalingPolicyItemProvider = new ScalingPolicyItemProvider(this);
		}

		return scalingPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.deployment.LoadBalancer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadBalancerItemProvider loadBalancerItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.deployment.LoadBalancer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadBalancerAdapter() {
		if (loadBalancerItemProvider == null) {
			loadBalancerItemProvider = new LoadBalancerItemProvider(this);
		}

		return loadBalancerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (deploymentItemProvider != null) deploymentItemProvider.dispose();
		if (serviceDeploymentItemProvider != null) serviceDeploymentItemProvider.dispose();
		if (genericDeploymentItemProvider != null) genericDeploymentItemProvider.dispose();
		if (runtimeDeploymentItemProvider != null) runtimeDeploymentItemProvider.dispose();
		if (computingEnvironmentItemProvider != null) computingEnvironmentItemProvider.dispose();
		if (clusteredComputingEnvironmentItemProvider != null) clusteredComputingEnvironmentItemProvider.dispose();
		if (scalableComputingEnvironmentItemProvider != null) scalableComputingEnvironmentItemProvider.dispose();
		if (scalingManagerItemProvider != null) scalingManagerItemProvider.dispose();
		if (scalingPolicyItemProvider != null) scalingPolicyItemProvider.dispose();
		if (loadBalancerItemProvider != null) loadBalancerItemProvider.dispose();
	}

}
