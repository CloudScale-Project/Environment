package eu.cloudscaleproject.env.analyser.editors;

import java.io.IOException;

import org.eclipse.core.resources.IResourceChangeListener;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.emf.common.ui.URIEditorInput;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.emf.edit.ui.celleditor.AdapterFactoryTreeEditor;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.jface.viewers.DoubleClickEvent;
import org.eclipse.jface.viewers.IDoubleClickListener;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.ResourceUtil;

import de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelRepositoryDiagramEditorPlugin;
import de.uka.ipd.sdq.pcm.repository.BasicComponent;
import de.uka.ipd.sdq.pcm.repository.util.RepositoryAdapterFactory;
import de.uka.ipd.sdq.pcm.seff.ResourceDemandingSEFF;
import de.uka.ipd.sdq.pcm.seff.ServiceEffectSpecification;
import de.uka.ipd.sdq.pcm.seff.util.SeffAdapterFactory;
import eu.cloudscaleproject.env.analyser.CloudScalePcmResources;
import eu.cloudscaleproject.env.common.CloudscaleContext;
import eu.cloudscaleproject.env.toolchain.editors.ProjectEditor;

public class SeffComposite extends Composite {
	
	private CloudScalePcmResources pcmResources;
	
	@SuppressWarnings("unused")
	private final ProjectEditor projectEditor;
	
	private final Tree tree;
	private final TreeViewer treeViewer;
	
	private final IWorkspace workspace;
	private IResourceChangeListener resourceChangeListener;

	private IDoubleClickListener doubleClickListener = null;
	
	/**
	 * Create the composite.
	 * @param parent
	 * @param style
	 */
	public SeffComposite(Composite parent, ProjectEditor projectEditor, int style) {
		super(parent, style);
		setLayout(new GridLayout(1, false));
		
		CloudscaleContext.inject(this);
		
		this.projectEditor = projectEditor;		
		this.workspace = ResourceUtil.getFile(projectEditor.getEditorInput()).getProject().getWorkspace();
		this.pcmResources = new CloudScalePcmResources(ResourceUtil.getFile(projectEditor.getEditorInput()).getProject());
		
		Label lblNewLabel = new Label(this, SWT.NONE);
		lblNewLabel.setText("Service effect specification editor:");
		
		tree = new Tree(this, SWT.BORDER);        
		tree.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		treeViewer = new TreeViewer(tree);
		
		ComposedAdapterFactory adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
		adapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
		adapterFactory.addAdapterFactory(new RepositoryAdapterFactory());
		adapterFactory.addAdapterFactory(new SeffAdapterFactory());
		adapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());
		
		treeViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
		treeViewer.setLabelProvider(new AdapterFactoryLabelProvider(adapterFactory));
		treeViewer.addFilter(new SeffViewFilter());
		
		new AdapterFactoryTreeEditor(tree, adapterFactory);
		
		doubleClickListener = new IDoubleClickListener() {
			
			@Override
			public void doubleClick(DoubleClickEvent event) {
				ISelection s = treeViewer.getSelection();
				Object element = ((StructuredSelection)s).getFirstElement();
				if (element instanceof ServiceEffectSpecification) {

					Diagram diagram = null;
					Resource repDiagramResource = pcmResources.getPcmResource(CloudScalePcmResources.REPOSITORY_DIAGRAM);
					
					for(EObject obj : repDiagramResource.getContents()){
						if(obj instanceof Diagram){
							Diagram d = (Diagram)obj;
							if(d.getElement().equals(element)){
								diagram = d;
							}
						}
					}
					
					if(diagram == null){
						diagram = ViewService.createDiagram((ServiceEffectSpecification)element, "PCM SEFF Model", 
							PalladioComponentModelRepositoryDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
						repDiagramResource.getContents().add(diagram);
						
						try {
							repDiagramResource.save(null);
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
					URI uri = EcoreUtil.getURI(diagram);
					String editorName = uri.lastSegment()
							+ "#"
							+ ((BasicComponent) ((ResourceDemandingSEFF) diagram.getElement()).eContainer()).getEntityName()
							+ ".";
							//+ ((ResourceDemandingSEFF) diagram.getElement())
									//.getDescribedService__SEFF()
									//.getEntityName(); //$NON-NLS-1$
					
					IEditorInput editorInput = new URIEditorInput(uri,editorName);
					IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
					
					try {
						page.openEditor(editorInput, "de.uka.ipd.sdq.pcm.gmf.seff.part.SeffDiagramEditorID");
					} catch (PartInitException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			}
		};
		treeViewer.addDoubleClickListener(doubleClickListener);
		
		/*
		resourceChangeListener = new IResourceChangeListener() {
			@Override
			public void resourceChanged(IResourceChangeEvent event) {
		    	pcmResources.reloadResources();
		    	Resource pcmResource = pcmResources.getPcmResource(CloudScalePcmResources.REPOSITORY);
		    	if (pcmResource == null)
		    	{
		    		return;
		    	}
                EList<EObject> l = pcmResource.getContents();
                if (!l.isEmpty())
                	treeViewer.setInput(l.get(0));

				treeViewer.expandToLevel(2);
			}
			
		};
		workspace.addResourceChangeListener(resourceChangeListener);
		*/
		
        EList<EObject> l = pcmResources.getPcmResource(CloudScalePcmResources.REPOSITORY).getContents();
        if (!l.isEmpty())
        	treeViewer.setInput(l.get(0));
		treeViewer.expandToLevel(2);
	}
	
	public static class SeffViewFilter extends ViewerFilter {

		@Override
		public boolean select(Viewer viewer, Object parentElement, Object element) {
			if(element instanceof ServiceEffectSpecification
					|| element instanceof BasicComponent){
				return true;
			}
			return false;
		}
	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}
	
	@Override
	public void dispose() {
		workspace.removeResourceChangeListener(resourceChangeListener);
		super.dispose();
	}
}
