package eu.cloudscaleproject.env.toolchain.handlers;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.e4.core.di.annotations.CanExecute;
import org.eclipse.e4.core.di.annotations.Execute;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PlatformUI;

import eu.cloudscaleproject.env.common.ExtensionRetriever;
import eu.cloudscaleproject.env.common.explorer.ExplorerActions;
import eu.cloudscaleproject.env.common.explorer.ExplorerProjectPaths;
import eu.cloudscaleproject.env.toolchain.ProjectEditorExtension;
import eu.cloudscaleproject.env.toolchain.editors.ProjectEditor;

public abstract class AbstractOpenEditorHandler {

    public static String EDITORS_EXTENSION_POINT_ID = "eu.cloudscaleproject.env.toolchain.editors";

	@CanExecute
	public boolean canExecute()
	{
		IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();

		IProject project = null;
		if (editor != null)
			project = ExplorerProjectPaths.getProject(editor);
		else
			project = ExplorerProjectPaths.getProjectFromSelection();
		
		return project != null;
	}

	@Execute
	public void execute(ExtensionRetriever er) {
		IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();

		IProject project = null;
		if (editor != null)
			project = ExplorerProjectPaths.getProject(editor);
		else
			project = ExplorerProjectPaths.getProjectFromSelection();
		
		if (project == null)
			return;
			
		IFile file = ExplorerProjectPaths.getPropertyFile(project);
		
		ProjectEditor pe = (ProjectEditor)ExplorerActions.openEditor(project, file);
		Object tab = er.retrieveExtensionObject(EDITORS_EXTENSION_POINT_ID, getTabItemExtensionId(), "class");
				pe.openTab((ProjectEditorExtension)tab);
	}
	
	abstract protected String getTabItemExtensionId();
}
