/**
 */
package org.scaledl.overview.specification.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.scaledl.overview.specification.util.SpecificationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpecificationItemProviderAdapterFactory extends SpecificationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpecificationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.SystemSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemSpecificationItemProvider systemSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.SystemSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemSpecificationAdapter() {
		if (systemSpecificationItemProvider == null) {
			systemSpecificationItemProvider = new SystemSpecificationItemProvider(this);
		}

		return systemSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.CloudSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudSpecificationItemProvider cloudSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.CloudSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudSpecificationAdapter() {
		if (cloudSpecificationItemProvider == null) {
			cloudSpecificationItemProvider = new CloudSpecificationItemProvider(this);
		}

		return cloudSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ServiceSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceSpecificationItemProvider serviceSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ServiceSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceSpecificationAdapter() {
		if (serviceSpecificationItemProvider == null) {
			serviceSpecificationItemProvider = new ServiceSpecificationItemProvider(this);
		}

		return serviceSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.CloudEnvironmentDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudEnvironmentDescriptorItemProvider cloudEnvironmentDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.CloudEnvironmentDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudEnvironmentDescriptorAdapter() {
		if (cloudEnvironmentDescriptorItemProvider == null) {
			cloudEnvironmentDescriptorItemProvider = new CloudEnvironmentDescriptorItemProvider(this);
		}

		return cloudEnvironmentDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.RegionDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionDescriptorItemProvider regionDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.RegionDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionDescriptorAdapter() {
		if (regionDescriptorItemProvider == null) {
			regionDescriptorItemProvider = new RegionDescriptorItemProvider(this);
		}

		return regionDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.AvailabilityZoneDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvailabilityZoneDescriptorItemProvider availabilityZoneDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.AvailabilityZoneDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvailabilityZoneDescriptorAdapter() {
		if (availabilityZoneDescriptorItemProvider == null) {
			availabilityZoneDescriptorItemProvider = new AvailabilityZoneDescriptorItemProvider(this);
		}

		return availabilityZoneDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.NetworkInfrastructureServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkInfrastructureServiceDescriptorItemProvider networkInfrastructureServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.NetworkInfrastructureServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkInfrastructureServiceDescriptorAdapter() {
		if (networkInfrastructureServiceDescriptorItemProvider == null) {
			networkInfrastructureServiceDescriptorItemProvider = new NetworkInfrastructureServiceDescriptorItemProvider(this);
		}

		return networkInfrastructureServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ComputingInfrastructureServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingInfrastructureServiceDescriptorItemProvider computingInfrastructureServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ComputingInfrastructureServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingInfrastructureServiceDescriptorAdapter() {
		if (computingInfrastructureServiceDescriptorItemProvider == null) {
			computingInfrastructureServiceDescriptorItemProvider = new ComputingInfrastructureServiceDescriptorItemProvider(this);
		}

		return computingInfrastructureServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ComputingResourceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingResourceDescriptorItemProvider computingResourceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ComputingResourceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingResourceDescriptorAdapter() {
		if (computingResourceDescriptorItemProvider == null) {
			computingResourceDescriptorItemProvider = new ComputingResourceDescriptorItemProvider(this);
		}

		return computingResourceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.PlatformServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformServiceDescriptorItemProvider platformServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.PlatformServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformServiceDescriptorAdapter() {
		if (platformServiceDescriptorItemProvider == null) {
			platformServiceDescriptorItemProvider = new PlatformServiceDescriptorItemProvider(this);
		}

		return platformServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.PlatformRuntimeServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformRuntimeServiceDescriptorItemProvider platformRuntimeServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.PlatformRuntimeServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformRuntimeServiceDescriptorAdapter() {
		if (platformRuntimeServiceDescriptorItemProvider == null) {
			platformRuntimeServiceDescriptorItemProvider = new PlatformRuntimeServiceDescriptorItemProvider(this);
		}

		return platformRuntimeServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.PlatformSupportServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformSupportServiceDescriptorItemProvider platformSupportServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.PlatformSupportServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformSupportServiceDescriptorAdapter() {
		if (platformSupportServiceDescriptorItemProvider == null) {
			platformSupportServiceDescriptorItemProvider = new PlatformSupportServiceDescriptorItemProvider(this);
		}

		return platformSupportServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ProvidedPlatformServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedPlatformServiceDescriptorItemProvider providedPlatformServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ProvidedPlatformServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedPlatformServiceDescriptorAdapter() {
		if (providedPlatformServiceDescriptorItemProvider == null) {
			providedPlatformServiceDescriptorItemProvider = new ProvidedPlatformServiceDescriptorItemProvider(this);
		}

		return providedPlatformServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ProvidedPlatformRuntimeServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedPlatformRuntimeServiceDescriptorItemProvider providedPlatformRuntimeServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ProvidedPlatformRuntimeServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedPlatformRuntimeServiceDescriptorAdapter() {
		if (providedPlatformRuntimeServiceDescriptorItemProvider == null) {
			providedPlatformRuntimeServiceDescriptorItemProvider = new ProvidedPlatformRuntimeServiceDescriptorItemProvider(this);
		}

		return providedPlatformRuntimeServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ProvidedPlatformSupportServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedPlatformSupportServiceDescriptorItemProvider providedPlatformSupportServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ProvidedPlatformSupportServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedPlatformSupportServiceDescriptorAdapter() {
		if (providedPlatformSupportServiceDescriptorItemProvider == null) {
			providedPlatformSupportServiceDescriptorItemProvider = new ProvidedPlatformSupportServiceDescriptorItemProvider(this);
		}

		return providedPlatformSupportServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.SoftwareServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareServiceDescriptorItemProvider softwareServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.SoftwareServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareServiceDescriptorAdapter() {
		if (softwareServiceDescriptorItemProvider == null) {
			softwareServiceDescriptorItemProvider = new SoftwareServiceDescriptorItemProvider(this);
		}

		return softwareServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ProvidedSoftwareServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedSoftwareServiceDescriptorItemProvider providedSoftwareServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ProvidedSoftwareServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedSoftwareServiceDescriptorAdapter() {
		if (providedSoftwareServiceDescriptorItemProvider == null) {
			providedSoftwareServiceDescriptorItemProvider = new ProvidedSoftwareServiceDescriptorItemProvider(this);
		}

		return providedSoftwareServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scaledl.overview.specification.ExternalSoftwareServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalSoftwareServiceDescriptorItemProvider externalSoftwareServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.scaledl.overview.specification.ExternalSoftwareServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalSoftwareServiceDescriptorAdapter() {
		if (externalSoftwareServiceDescriptorItemProvider == null) {
			externalSoftwareServiceDescriptorItemProvider = new ExternalSoftwareServiceDescriptorItemProvider(this);
		}

		return externalSoftwareServiceDescriptorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemSpecificationItemProvider != null) systemSpecificationItemProvider.dispose();
		if (cloudSpecificationItemProvider != null) cloudSpecificationItemProvider.dispose();
		if (serviceSpecificationItemProvider != null) serviceSpecificationItemProvider.dispose();
		if (cloudEnvironmentDescriptorItemProvider != null) cloudEnvironmentDescriptorItemProvider.dispose();
		if (regionDescriptorItemProvider != null) regionDescriptorItemProvider.dispose();
		if (availabilityZoneDescriptorItemProvider != null) availabilityZoneDescriptorItemProvider.dispose();
		if (networkInfrastructureServiceDescriptorItemProvider != null) networkInfrastructureServiceDescriptorItemProvider.dispose();
		if (computingInfrastructureServiceDescriptorItemProvider != null) computingInfrastructureServiceDescriptorItemProvider.dispose();
		if (computingResourceDescriptorItemProvider != null) computingResourceDescriptorItemProvider.dispose();
		if (platformServiceDescriptorItemProvider != null) platformServiceDescriptorItemProvider.dispose();
		if (platformRuntimeServiceDescriptorItemProvider != null) platformRuntimeServiceDescriptorItemProvider.dispose();
		if (platformSupportServiceDescriptorItemProvider != null) platformSupportServiceDescriptorItemProvider.dispose();
		if (providedPlatformServiceDescriptorItemProvider != null) providedPlatformServiceDescriptorItemProvider.dispose();
		if (providedPlatformRuntimeServiceDescriptorItemProvider != null) providedPlatformRuntimeServiceDescriptorItemProvider.dispose();
		if (providedPlatformSupportServiceDescriptorItemProvider != null) providedPlatformSupportServiceDescriptorItemProvider.dispose();
		if (softwareServiceDescriptorItemProvider != null) softwareServiceDescriptorItemProvider.dispose();
		if (providedSoftwareServiceDescriptorItemProvider != null) providedSoftwareServiceDescriptorItemProvider.dispose();
		if (externalSoftwareServiceDescriptorItemProvider != null) externalSoftwareServiceDescriptorItemProvider.dispose();
	}

}
