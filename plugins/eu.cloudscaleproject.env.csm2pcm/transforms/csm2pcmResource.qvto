library csm2pcmResource;

modeltype OVERVIEW uses overview('http://org.scaledl.overview/ScaleDLOverviewComponentModel/1.0');
modeltype RESOURCE_TYPE uses pcm::resourcetype('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype RESOURCE uses pcm::resourceenvironment('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype ALLOCATION uses pcm::allocation('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');

modeltype STOEX uses stoex('http://sdq.ipd.uka.de/StochasticExpressions/2.2');

configuration property CSMID : String;

/*
mapping OVERVIEW::architecture::ComputingInfrastructureService::computingInfrastructureService2resourceContainer(in resourceRepository : ResourceRepository) 
		: RESOURCE::ResourceContainer{
	id := CSMID + self.id + '_instance2resourceContainer'; 
	entityName := 'Instance Resource ' + self.name;
	activeResourceSpecifications_ResourceContainer := createComputingInfrastructureResourceSpecifications(resourceRepository, self.computingEntity, result);
}
*/

mapping OVERVIEW::architecture::ProvidedService::providedService2resourceContainer(in resourceRepository : ResourceRepository) 
		: RESOURCE::ResourceContainer{
	id := CSMID + self.id + '_service2resourceContainer';
	entityName := 'Service Resource ' + self.name;
	activeResourceSpecifications_ResourceContainer := createProvidedServiceResourceSpecifications(resourceRepository, self, result);
	
}

mapping OVERVIEW::architecture::ServiceProxy::serviceProxy2resourceContainer(in resourceRepository : ResourceRepository) 
		: RESOURCE::ResourceContainer{
	id := CSMID + self.id + '_serviceProxy2resourceContainer';
	entityName := 'Service Resource ' + self.name;
	activeResourceSpecifications_ResourceContainer := createProxyResourceSpecifications(resourceRepository, self, result);
	
}

mapping OVERVIEW::architecture::Proxy::connector2resourceContainer(in resourceRepository : ResourceRepository) 
		: RESOURCE::ResourceContainer{
	id := CSMID + self.id + '_connector2resourceContainer'; 
	entityName := 'Client Resource ' + self.name;
	activeResourceSpecifications_ResourceContainer := createProxyResourceSpecifications(resourceRepository, self, result);
	
}

helper createResourceContainerLink(in name : String,
									in connectionId : String, 
									in bandwidth : Integer,
									in latency : Integer,
									in pcmLinkType : CommunicationLinkResourceType,
									in resourceRepository : ResourceRepository,
									in resourceContainers : Set(ResourceContainer)) : LinkingResource{
	
	var link : LinkingResource := object LinkingResource{
	
		entityName := name;
		id := CSMID + connectionId + '_createResourceContainerLink';
		
		resourceContainers->forEach(rc){
			connectedResourceContainers_LinkingResource += rc;		
		};
		
		communicationLinkResourceSpecifications_LinkingResource := object CommunicationLinkResourceSpecification{
	
				id := CSMID + connectionId + '_createResSpec'; 
	
				communicationLinkResourceType_CommunicationLinkResourceSpecification := pcmLinkType;
				failureProbability := 0.0;
				
				latency_CommunicationLinkResourceSpecification := object pcm::core::PCMRandomVariable{
					specification := latency.toString();
				};
				throughput_CommunicationLinkResourceSpecification := object pcm::core::PCMRandomVariable{
					specification := bandwidth.toString();
				};
		};
	};
	
	return link;
}

////////////////////////// internal helper functions ///////////////////////////////////////////////////////////////////////////////////

/*
helper doCreateComputingInfrastructureResourceSpecifications(in resourceRepository : ResourceRepository, 
									in instance : OVERVIEW::infrastructure::Instance, 
									in container : ResourceContainer) : Sequence(RESOURCE::ProcessingResourceSpecification){

	var resources : Sequence(ProcessingResourceSpecification);
	var descriptor : OVERVIEW::definition::InstanceDescriptor;
	descriptor := instance.descriptor;
	
	//add one CPU
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'CPU');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'ProcessorSharing');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := descriptor.cpuUnits;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix
			specification := descriptor.cpu.toString();
		};
		id := CSMID + instance.id + '_createCPU';
	};
	
	//add one HDD
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'HDD');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'FCFS');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 1;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix
			specification := descriptor.storage.toString();
		};
		id := CSMID + instance.id + '_createHDD';
	};
	
	return resources;			
				
}

helper doCreateComputingInfrastructureResourceSpecifications(in resourceRepository : ResourceRepository, 
									in cGroup : OVERVIEW::infrastructure::ComputingGroup, 
									in container : ResourceContainer) : Sequence(RESOURCE::ProcessingResourceSpecification){
									
	var resources : Sequence(ProcessingResourceSpecification);
	var descriptor : OVERVIEW::definition::InstanceDescriptor;
	descriptor := cGroup.instanceDescriptor;
	
	//add one CPU
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'CPU');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'ProcessorSharing');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := descriptor.cpuUnits;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix
			specification := descriptor.cpu.toString();
		};
		id := CSMID + cGroup.id + '_createCPU';
	};
	
	//add one HDD
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'HDD');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'FCFS');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 1;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix
			specification := descriptor.storage.toString();
		};
		id := CSMID + cGroup.id + '_createHDD';
	};
	
	return resources;	
				
}

helper createComputingInfrastructureResourceSpecifications(in resourceRepository : ResourceRepository, 
									in cEntity : OVERVIEW::infrastructure::ComputingEntity, 
									in container : ResourceContainer) : Sequence(RESOURCE::ProcessingResourceSpecification){
	
	var resources : Sequence(ProcessingResourceSpecification);
		
	if(cEntity.oclIsTypeOf(OVERVIEW::infrastructure::Instance)) then{
		resources += doCreateComputingInfrastructureResourceSpecifications(resourceRepository, cEntity.oclAsType(OVERVIEW::infrastructure::Instance), container);
	}endif;
	if(cEntity.oclIsTypeOf(OVERVIEW::infrastructure::ComputingGroup)) then{
		resources += doCreateComputingInfrastructureResourceSpecifications(resourceRepository, cEntity.oclAsType(OVERVIEW::infrastructure::ComputingGroup), container);
	}endif;
	
	return resources;
}

/*
helper createComputingInfrastructureResourceSpecifications(in resourceRepository : ResourceRepository, 
									in ciService : OVERVIEW::architecture::ComputingInfrastructureService, 
									in container : ResourceContainer) : Sequence(RESOURCE::ProcessingResourceSpecification){
		
	var resources : Sequence(ProcessingResourceSpecification);
	var descriptor : OVERVIEW::definition::ComputingInfrastructureServiceDescriptor;
	descriptor := ciService.descriptor;
	
	//add one CPU
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'CPU');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'ProcessorSharing');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := ciService.computingEntity.oclAsType(OVERVIEW::infrastructure::ComputingGroup).instanceDescriptor.cpuUnits;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix
			specification := descriptor.cpu.toString();
		};
		id := CSMID + ciService.id + '_createCPU';
	};
	
	//add one HDD
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'HDD');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'FCFS');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 1;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix
			specification := descriptor.storage.toString();
		};
		id := CSMID + ciService.id + '_createHDD';
	};
	
	return resources;
}
*/

helper createProvidedServiceResourceSpecifications(in resourceRepository : ResourceRepository, 
									in service : OVERVIEW::architecture::ProvidedService, 
									in container : ResourceContainer) : Sequence(RESOURCE::ProcessingResourceSpecification){
		
	//TODO: parse wsdl service specification
	var resources : Sequence(ProcessingResourceSpecification);
	var deployment : OVERVIEW::deployment::ServiceDeployment;
	deployment := service.deployment;
	
	if(deployment.oclIsKindOf(OVERVIEW::deployment::RuntimeDeployment)) then{
		var runtimeDeployment : OVERVIEW::deployment::RuntimeDeployment;
		runtimeDeployment := deployment.oclAsType(OVERVIEW::deployment::RuntimeDeployment);
		
		resources := createSingleComputingEnvResourceSpecifications(
						resourceRepository, container, service, runtimeDeployment.computingEnvironment);
	}
	else{
	
	//add one CPU
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'CPU');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'ProcessorSharing');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 1;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix/parse wsdl
			specification := '100';
		};
		id := CSMID + service.id + '_createCPU';
	};
	
	//add one HDD
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'HDD');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'FCFS');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 1;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix/parse wsdl
			specification := '100';
		};
		id := CSMID + service.id + '_createHDD';
	};
	
	}endif;
	
	return resources;
}

helper createSingleComputingEnvResourceSpecifications(in resourceRepository : ResourceRepository,
											 		  in container : ResourceContainer,
													  in service : OVERVIEW::architecture::ProvidedService,
													  in computingEnv : OVERVIEW::deployment::ComputingEnvironment)
																	: Sequence(RESOURCE::ProcessingResourceSpecification){
	var resources : Sequence(ProcessingResourceSpecification);
	
	//add one CPU
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'CPU');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'ProcessorSharing');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := computingEnv.instanceDescriptor.cpuUnits;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix/parse wsdl
			specification := computingEnv.instanceDescriptor.cpu.toString();
		};
		id := CSMID + service.id + '_createCPU';
	};
	
	//add one HDD
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'HDD');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'FCFS');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 1;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix/parse wsdl
			specification := computingEnv.instanceDescriptor.storage.toString();
		};
		id := CSMID + service.id + '_createHDD';
	};
	
	return resources;																	
	
}

helper createProxyResourceSpecifications(in resourceRepository : ResourceRepository, 
									in connecor : OVERVIEW::architecture::Proxy, 
									in container : ResourceContainer) : Sequence(RESOURCE::ProcessingResourceSpecification){
		
	//TODO: retrieve client hardware specifications
	var resources : Sequence(ProcessingResourceSpecification);
	
	//add one CPU
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'CPU');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'ProcessorSharing');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 100;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix/parse wsdl
			specification := '100';
		};
		
		id := CSMID + connecor.id + '_createCPU';
	};
	
	//add one HDD
	resources += object ProcessingResourceSpecification{
		
		activeResourceType_ActiveResourceSpecification 
			:= resourceRepository.availableResourceTypes_ResourceRepository[ProcessingResourceType]->selectOne(entityName = 'HDD');
		
		schedulingPolicy := resourceRepository.schedulingPolicies__ResourceRepository->selectOne(id = 'FCFS');
		
		MTTR := 0.0;
		MTTF := 0.0;
		requiredByContainer := false;
		numberOfReplicas := 100;
		resourceContainer_ProcessingResourceSpecification := container;
		
		processingRate_ProcessingResourceSpecification := object pcm::core::PCMRandomVariable{
			//TODO: fix/parse wsdl
			specification := '100';
		};

		id := CSMID + connecor.id + '_createHDD';
	};
	
	return resources;
}

query OVERVIEW::architecture::ProvidedService::getResourceContainer() : ResourceContainer{
	return self.resolveoneIn(
					OVERVIEW::architecture::ProvidedService::providedService2resourceContainer,
					ResourceContainer);
}