library csm2pcmUtil;

modeltype OVERVIEW uses overview('http://org.scaledl.overview/ScaleDLOverviewComponentModel/1.0');
modeltype REPOSITORY uses pcm::repository('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype SYSTEM uses pcm::system('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype COMPOSITION uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype RESOURCE uses pcm::resourceenvironment('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype ALLOCATION uses pcm::allocation('http://palladiosimulator.org/PalladioComponentModel/5.1');

//AssemblyContext helper querys

query AssemblyContext::getRequiredRole(in operaionInterface : pcm::repository::OperationInterface) : OperationRequiredRole {
	var opRequiredRole : OperationRequiredRole;
	if(operaionInterface = null) then{
		opRequiredRole := self.encapsulatedComponent__AssemblyContext
			.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]
			->any(true);
	}
	else{
		opRequiredRole := self.encapsulatedComponent__AssemblyContext
			.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]
			->selectOne(requiredInterface__OperationRequiredRole = operaionInterface);
	}endif;
	
	return opRequiredRole;
}
	
query AssemblyContext::getProvidedRole(in operaionInterface : pcm::repository::OperationInterface) : OperationProvidedRole {
	var opProvidedRole : OperationProvidedRole;
	if(operaionInterface = null) then{
		opProvidedRole := self.encapsulatedComponent__AssemblyContext
			.providedRoles_InterfaceProvidingEntity[OperationProvidedRole]
			->any(true);
	}
	else{
		opProvidedRole := self.encapsulatedComponent__AssemblyContext
			.providedRoles_InterfaceProvidingEntity[OperationProvidedRole]
			->selectOne(providedInterface__OperationProvidedRole = operaionInterface);
	}endif;
	
	return opProvidedRole;
}

query getAssemblyContextFromProvidedRole(in assemblyContexts : Set(AssemblyContext), in providedRole : OperationProvidedRole) : AssemblyContext {
	var acs : List(AssemblyContext);
	
	assemblyContexts->forEach(ac){
		ac.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->forEach(pr){
			if(pr = providedRole) then{
				acs += ac;
			}endif;
		};
	};
	
	return acs->any(true);
}

query getOpositeAssemblyContextFromProvidedRole(in assemblyContexts : Set(AssemblyContext), in providedRole : OperationProvidedRole) : List(AssemblyContext) {
	var acs : List(AssemblyContext);
	
	assemblyContexts->forEach(ac){
		ac.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]->forEach(rr){
			if(rr.requiredInterface__OperationRequiredRole = providedRole.providedInterface__OperationProvidedRole) then{
				acs += ac;
			}endif;
		};
	};
	
	return acs;
}

query getRelatedAssemblyContextFromProvidedRole(in assemblyContexts : Set(AssemblyContext), in providedRole : OperationProvidedRole) : List(AssemblyContext) {
	var acs : List(AssemblyContext);
	
	assemblyContexts->forEach(ac){
		ac.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity[OperationProvidedRole]->forEach(pr){
			if(pr.providedInterface__OperationProvidedRole = providedRole.providedInterface__OperationProvidedRole) then{
				acs += ac;
			}endif;
		};
	};
	
	return acs;
}

query getAssemblyContextFromRequiredRole(in assemblyContexts : Set(AssemblyContext), in requiredRole : RequiredRole) : AssemblyContext {
	var acs : List(AssemblyContext);
	
	assemblyContexts->forEach(ac){
		ac.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity->forEach(rr){
			if(rr = requiredRole) then{
				acs += ac;
			}endif;
		};
	};
	
	return acs->any(true);
}

query getOpositeAssemblyContextFromRequiredRole(in assemblyContexts : Set(AssemblyContext), in requiredRole : OperationRequiredRole) : List(AssemblyContext) {
	var acs : List(AssemblyContext);
	
	assemblyContexts->forEach(ac){
		ac.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity[OperationProvidedRole]->forEach(pr){
			if(pr.providedInterface__OperationProvidedRole = requiredRole.requiredInterface__OperationRequiredRole) then{
				acs += ac;
			}endif;
		};
	};
	
	return acs;
}

query getRelatedAssemblyContextFromRequiredRole(in assemblyContexts : Set(AssemblyContext), in requiredRole : OperationRequiredRole) : List(AssemblyContext) {
	var acs : List(AssemblyContext);
	
	assemblyContexts->forEach(ac){
		ac.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]->forEach(rr){
			if(rr.requiredInterface__OperationRequiredRole = requiredRole.requiredInterface__OperationRequiredRole) then{
				acs += ac;
			}endif;
		};
	};
	
	return acs;
}

query getProvidingExternalConnections(in cloudEnv : OVERVIEW::architecture::CloudEnvironment) : Set(OVERVIEW::architecture::ExternalConnection){
	return cloudEnv.architecture.externalConnections->select(cloudEnv = (source.getCloudEnvironment()));
}

query getRequiringExternalConnections(in cloudEnv : OVERVIEW::architecture::CloudEnvironment) : Set(OVERVIEW::architecture::ExternalConnection){
		return cloudEnv.architecture.externalConnections->select(cloudEnv = (source.getCloudEnvironment()));
}

query getUsageConnections(in cloudEnv : OVERVIEW::architecture::CloudEnvironment) : Set(OVERVIEW::architecture::ExternalConnection){
		return cloudEnv.architecture.usageConnections->select(cloudEnv = (target.getCloudEnvironment()));
}

query collectProvidedOpInterfaces(in connections : Set(OVERVIEW::architecture::Connection)) : Set(OVERVIEW::application::OperationInterface){
	var hcs : Set(OVERVIEW::application::OperationInterface);
	//collect internal
	connections[OVERVIEW::architecture::InternalConnection]->forEach(ic){
		hcs += ic.target.providedInterfaces;
	};
	//collect hybrid
	connections[OVERVIEW::architecture::ExternalConnection]->forEach(ec){
		hcs += ec.target.providedInterfaces;
	};
	return hcs;
}

query getApplicationServicesRequiringInterfaces(in platformService : OVERVIEW::architecture::SoftwareServiceContainer, 
												in interface : OVERVIEW::application::OperationInterface) 
												: Set(OVERVIEW::architecture::SoftwareService){
	
	var daServices : Set(OVERVIEW::architecture::SoftwareService);
	
	platformService.softwareServices->forEach(daService){
		if(daService.requiredInterfaces->includes(interface)) then{
			daServices += daService;
		}endif;
	};
	return daServices;
}

query OVERVIEW::application::OperationInterfaceContainer::getProvidedService() : OVERVIEW::architecture::ProvidedService{
	
	var providedService : OVERVIEW::architecture::ProvidedService := null;
	
	if(self.oclIsKindOf(OVERVIEW::architecture::Service)) then{
		providedService := self.oclAsType(OVERVIEW::architecture::Service).getProvidedService();
	} endif;
	if(self.oclIsKindOf(OVERVIEW::architecture::Proxy)) then{
		providedService := self.oclAsType(OVERVIEW::architecture::Proxy).getProvidedService();
	}endif;
	
	return providedService;
}

query OVERVIEW::architecture::Proxy::getProvidedService() : OVERVIEW::architecture::ProvidedService{
	
	var providedService : OVERVIEW::architecture::ProvidedService := null;
	if(self.oclIsKindOf(OVERVIEW::architecture::ProvidedService)) then{
		providedService := self.oclAsType(OVERVIEW::architecture::ProvidedService);
	} endif;
	
	return providedService;
}

query OVERVIEW::architecture::Service::getProvidedService() : OVERVIEW::architecture::ProvidedService{
	
	var providedService : OVERVIEW::architecture::ProvidedService := null;
	
	if(self.oclIsKindOf(OVERVIEW::architecture::ProvidedService)) then{
		providedService := self.oclAsType(OVERVIEW::architecture::ProvidedService);
		return providedService;
	} endif;
	
	if(self.oclIsKindOf(OVERVIEW::architecture::SoftwareService)) then{
		var softwareService := self.oclAsType(OVERVIEW::architecture::SoftwareService);
		
		if(softwareService.runtimePlatformService.oclIsKindOf(OVERVIEW::architecture::ProvidedService)) then{
			providedService := softwareService.runtimePlatformService.oclAsType(OVERVIEW::architecture::ProvidedService);
		}
		else{ 
			providedService := softwareService.runtimePlatformService
				.oclAsType(OVERVIEW::architecture::PlatformService).computingInfrastructureService
				.oclAsType(OVERVIEW::architecture::ProvidedService);
		}endif;
		return providedService;
	} endif;
	
	if(self.oclIsKindOf(OVERVIEW::architecture::PlatformService)) then{
		var platformService := self.oclAsType(OVERVIEW::architecture::PlatformService);
		
		if(platformService.computingInfrastructureService.oclIsKindOf(OVERVIEW::architecture::ProvidedService)) then{
			providedService := platformService.computingInfrastructureService.oclAsType(OVERVIEW::architecture::ProvidedService);
			return providedService;
		}endif;
	} endif;
	
	log("Unable to retrieve 'ProvidedService' (the one that holds deployment) from specified 'Service'");
	
	return providedService;
}

query OVERVIEW::architecture::Service::getDeployment() : OVERVIEW::deployment::ServiceDeployment{
	return self.getProvidedService().deployment;
}

query OVERVIEW::core::Entity::getCloudEnvironment() : OVERVIEW::architecture::CloudEnvironment{
	
	var srv : Element := self;
	
	while(srv != null){
		
		if(srv.oclIsKindOf(OVERVIEW::architecture::CloudEnvironment)) then{
			return srv.oclAsType(OVERVIEW::architecture::CloudEnvironment);
		}endif;
		
		srv := srv.container();
	};
	
	log("Searching cloud environment for entity failed! Entity is not contained in cloud environment!");
	
	return null;
}
