/**
 */
package eu.cloudscaleproject.env.csm.definition.provider;

import eu.cloudscaleproject.env.csm.definition.util.DefinitionAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DefinitionItemProviderAdapterFactory extends DefinitionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DefinitionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.SystemDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemDefinitionItemProvider systemDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.SystemDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemDefinitionAdapter() {
		if (systemDefinitionItemProvider == null) {
			systemDefinitionItemProvider = new SystemDefinitionItemProvider(this);
		}

		return systemDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.CloudDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudDefinitionItemProvider cloudDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.CloudDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudDefinitionAdapter() {
		if (cloudDefinitionItemProvider == null) {
			cloudDefinitionItemProvider = new CloudDefinitionItemProvider(this);
		}

		return cloudDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.SoftwareDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareDefinitionItemProvider softwareDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.SoftwareDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareDefinitionAdapter() {
		if (softwareDefinitionItemProvider == null) {
			softwareDefinitionItemProvider = new SoftwareDefinitionItemProvider(this);
		}

		return softwareDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.Descriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptorItemProvider descriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.Descriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptorAdapter() {
		if (descriptorItemProvider == null) {
			descriptorItemProvider = new DescriptorItemProvider(this);
		}

		return descriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.CloudEnvironmentDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudEnvironmentDescriptorItemProvider cloudEnvironmentDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.CloudEnvironmentDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudEnvironmentDescriptorAdapter() {
		if (cloudEnvironmentDescriptorItemProvider == null) {
			cloudEnvironmentDescriptorItemProvider = new CloudEnvironmentDescriptorItemProvider(this);
		}

		return cloudEnvironmentDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.RegionDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionDescriptorItemProvider regionDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.RegionDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionDescriptorAdapter() {
		if (regionDescriptorItemProvider == null) {
			regionDescriptorItemProvider = new RegionDescriptorItemProvider(this);
		}

		return regionDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.AvailabilityZoneDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvailabilityZoneDescriptorItemProvider availabilityZoneDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.AvailabilityZoneDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvailabilityZoneDescriptorAdapter() {
		if (availabilityZoneDescriptorItemProvider == null) {
			availabilityZoneDescriptorItemProvider = new AvailabilityZoneDescriptorItemProvider(this);
		}

		return availabilityZoneDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.InfrastructureServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureServiceDescriptorItemProvider infrastructureServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.InfrastructureServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureServiceDescriptorAdapter() {
		if (infrastructureServiceDescriptorItemProvider == null) {
			infrastructureServiceDescriptorItemProvider = new InfrastructureServiceDescriptorItemProvider(this);
		}

		return infrastructureServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.NetworkInfrastructureServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkInfrastructureServiceDescriptorItemProvider networkInfrastructureServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.NetworkInfrastructureServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkInfrastructureServiceDescriptorAdapter() {
		if (networkInfrastructureServiceDescriptorItemProvider == null) {
			networkInfrastructureServiceDescriptorItemProvider = new NetworkInfrastructureServiceDescriptorItemProvider(this);
		}

		return networkInfrastructureServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.ComputingInfrastructureServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingInfrastructureServiceDescriptorItemProvider computingInfrastructureServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.ComputingInfrastructureServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingInfrastructureServiceDescriptorAdapter() {
		if (computingInfrastructureServiceDescriptorItemProvider == null) {
			computingInfrastructureServiceDescriptorItemProvider = new ComputingInfrastructureServiceDescriptorItemProvider(this);
		}

		return computingInfrastructureServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.DeployableRuntimeServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableRuntimeServiceDescriptorItemProvider deployableRuntimeServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.DeployableRuntimeServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableRuntimeServiceDescriptorAdapter() {
		if (deployableRuntimeServiceDescriptorItemProvider == null) {
			deployableRuntimeServiceDescriptorItemProvider = new DeployableRuntimeServiceDescriptorItemProvider(this);
		}

		return deployableRuntimeServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.ExternalRuntimeServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalRuntimeServiceDescriptorItemProvider externalRuntimeServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.ExternalRuntimeServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalRuntimeServiceDescriptorAdapter() {
		if (externalRuntimeServiceDescriptorItemProvider == null) {
			externalRuntimeServiceDescriptorItemProvider = new ExternalRuntimeServiceDescriptorItemProvider(this);
		}

		return externalRuntimeServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.DeployableSupportServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableSupportServiceDescriptorItemProvider deployableSupportServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.DeployableSupportServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableSupportServiceDescriptorAdapter() {
		if (deployableSupportServiceDescriptorItemProvider == null) {
			deployableSupportServiceDescriptorItemProvider = new DeployableSupportServiceDescriptorItemProvider(this);
		}

		return deployableSupportServiceDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.definition.ExternalSupportServiceDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalSupportServiceDescriptorItemProvider externalSupportServiceDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.definition.ExternalSupportServiceDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalSupportServiceDescriptorAdapter() {
		if (externalSupportServiceDescriptorItemProvider == null) {
			externalSupportServiceDescriptorItemProvider = new ExternalSupportServiceDescriptorItemProvider(this);
		}

		return externalSupportServiceDescriptorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemDefinitionItemProvider != null) systemDefinitionItemProvider.dispose();
		if (cloudDefinitionItemProvider != null) cloudDefinitionItemProvider.dispose();
		if (softwareDefinitionItemProvider != null) softwareDefinitionItemProvider.dispose();
		if (descriptorItemProvider != null) descriptorItemProvider.dispose();
		if (cloudEnvironmentDescriptorItemProvider != null) cloudEnvironmentDescriptorItemProvider.dispose();
		if (regionDescriptorItemProvider != null) regionDescriptorItemProvider.dispose();
		if (availabilityZoneDescriptorItemProvider != null) availabilityZoneDescriptorItemProvider.dispose();
		if (infrastructureServiceDescriptorItemProvider != null) infrastructureServiceDescriptorItemProvider.dispose();
		if (networkInfrastructureServiceDescriptorItemProvider != null) networkInfrastructureServiceDescriptorItemProvider.dispose();
		if (computingInfrastructureServiceDescriptorItemProvider != null) computingInfrastructureServiceDescriptorItemProvider.dispose();
		if (deployableRuntimeServiceDescriptorItemProvider != null) deployableRuntimeServiceDescriptorItemProvider.dispose();
		if (externalRuntimeServiceDescriptorItemProvider != null) externalRuntimeServiceDescriptorItemProvider.dispose();
		if (deployableSupportServiceDescriptorItemProvider != null) deployableSupportServiceDescriptorItemProvider.dispose();
		if (externalSupportServiceDescriptorItemProvider != null) externalSupportServiceDescriptorItemProvider.dispose();
	}

}
