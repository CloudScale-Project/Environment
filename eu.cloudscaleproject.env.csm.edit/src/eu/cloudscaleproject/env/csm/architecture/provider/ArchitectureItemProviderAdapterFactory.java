/**
 */
package eu.cloudscaleproject.env.csm.architecture.provider;

import eu.cloudscaleproject.env.csm.architecture.util.ArchitectureAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArchitectureItemProviderAdapterFactory extends ArchitectureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArchitectureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.Architecture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchitectureItemProvider architectureItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.Architecture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchitectureAdapter() {
		if (architectureItemProvider == null) {
			architectureItemProvider = new ArchitectureItemProvider(this);
		}

		return architectureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.CloudEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudEnvironmentItemProvider cloudEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.CloudEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudEnvironmentAdapter() {
		if (cloudEnvironmentItemProvider == null) {
			cloudEnvironmentItemProvider = new CloudEnvironmentItemProvider(this);
		}

		return cloudEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.InfrastructureLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureLayerItemProvider infrastructureLayerItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.InfrastructureLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureLayerAdapter() {
		if (infrastructureLayerItemProvider == null) {
			infrastructureLayerItemProvider = new InfrastructureLayerItemProvider(this);
		}

		return infrastructureLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.PlatformLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformLayerItemProvider platformLayerItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.PlatformLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformLayerAdapter() {
		if (platformLayerItemProvider == null) {
			platformLayerItemProvider = new PlatformLayerItemProvider(this);
		}

		return platformLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.SoftwareLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareLayerItemProvider softwareLayerItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.SoftwareLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareLayerAdapter() {
		if (softwareLayerItemProvider == null) {
			softwareLayerItemProvider = new SoftwareLayerItemProvider(this);
		}

		return softwareLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.DeployableRuntimeService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableRuntimeServiceItemProvider deployableRuntimeServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.DeployableRuntimeService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableRuntimeServiceAdapter() {
		if (deployableRuntimeServiceItemProvider == null) {
			deployableRuntimeServiceItemProvider = new DeployableRuntimeServiceItemProvider(this);
		}

		return deployableRuntimeServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.DeployableSupportService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableSupportServiceItemProvider deployableSupportServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.DeployableSupportService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableSupportServiceAdapter() {
		if (deployableSupportServiceItemProvider == null) {
			deployableSupportServiceItemProvider = new DeployableSupportServiceItemProvider(this);
		}

		return deployableSupportServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.ExternalRuntimeService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalRuntimeServiceItemProvider externalRuntimeServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.ExternalRuntimeService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalRuntimeServiceAdapter() {
		if (externalRuntimeServiceItemProvider == null) {
			externalRuntimeServiceItemProvider = new ExternalRuntimeServiceItemProvider(this);
		}

		return externalRuntimeServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.ExternalSupportService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalSupportServiceItemProvider externalSupportServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.ExternalSupportService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalSupportServiceAdapter() {
		if (externalSupportServiceItemProvider == null) {
			externalSupportServiceItemProvider = new ExternalSupportServiceItemProvider(this);
		}

		return externalSupportServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.ExternalSoftwareService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalSoftwareServiceItemProvider externalSoftwareServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.ExternalSoftwareService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalSoftwareServiceAdapter() {
		if (externalSoftwareServiceItemProvider == null) {
			externalSoftwareServiceItemProvider = new ExternalSoftwareServiceItemProvider(this);
		}

		return externalSoftwareServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.DeployableSoftwareService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableSoftwareServiceItemProvider deployableSoftwareServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.DeployableSoftwareService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableSoftwareServiceAdapter() {
		if (deployableSoftwareServiceItemProvider == null) {
			deployableSoftwareServiceItemProvider = new DeployableSoftwareServiceItemProvider(this);
		}

		return deployableSoftwareServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.ComputingInfrastructureService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingInfrastructureServiceItemProvider computingInfrastructureServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.ComputingInfrastructureService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingInfrastructureServiceAdapter() {
		if (computingInfrastructureServiceItemProvider == null) {
			computingInfrastructureServiceItemProvider = new ComputingInfrastructureServiceItemProvider(this);
		}

		return computingInfrastructureServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.InternalConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalConnectionItemProvider internalConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.InternalConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalConnectionAdapter() {
		if (internalConnectionItemProvider == null) {
			internalConnectionItemProvider = new InternalConnectionItemProvider(this);
		}

		return internalConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.HybridConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HybridConnectionItemProvider hybridConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.HybridConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHybridConnectionAdapter() {
		if (hybridConnectionItemProvider == null) {
			hybridConnectionItemProvider = new HybridConnectionItemProvider(this);
		}

		return hybridConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.ExternalConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalConnectionItemProvider externalConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.ExternalConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalConnectionAdapter() {
		if (externalConnectionItemProvider == null) {
			externalConnectionItemProvider = new ExternalConnectionItemProvider(this);
		}

		return externalConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.ServiceProxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceProxyItemProvider serviceProxyItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.ServiceProxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceProxyAdapter() {
		if (serviceProxyItemProvider == null) {
			serviceProxyItemProvider = new ServiceProxyItemProvider(this);
		}

		return serviceProxyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cloudscaleproject.env.csm.architecture.UsageProxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsageProxyItemProvider usageProxyItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cloudscaleproject.env.csm.architecture.UsageProxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUsageProxyAdapter() {
		if (usageProxyItemProvider == null) {
			usageProxyItemProvider = new UsageProxyItemProvider(this);
		}

		return usageProxyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (architectureItemProvider != null) architectureItemProvider.dispose();
		if (cloudEnvironmentItemProvider != null) cloudEnvironmentItemProvider.dispose();
		if (infrastructureLayerItemProvider != null) infrastructureLayerItemProvider.dispose();
		if (platformLayerItemProvider != null) platformLayerItemProvider.dispose();
		if (softwareLayerItemProvider != null) softwareLayerItemProvider.dispose();
		if (deployableRuntimeServiceItemProvider != null) deployableRuntimeServiceItemProvider.dispose();
		if (deployableSupportServiceItemProvider != null) deployableSupportServiceItemProvider.dispose();
		if (externalRuntimeServiceItemProvider != null) externalRuntimeServiceItemProvider.dispose();
		if (externalSupportServiceItemProvider != null) externalSupportServiceItemProvider.dispose();
		if (externalSoftwareServiceItemProvider != null) externalSoftwareServiceItemProvider.dispose();
		if (deployableSoftwareServiceItemProvider != null) deployableSoftwareServiceItemProvider.dispose();
		if (computingInfrastructureServiceItemProvider != null) computingInfrastructureServiceItemProvider.dispose();
		if (internalConnectionItemProvider != null) internalConnectionItemProvider.dispose();
		if (hybridConnectionItemProvider != null) hybridConnectionItemProvider.dispose();
		if (externalConnectionItemProvider != null) externalConnectionItemProvider.dispose();
		if (serviceProxyItemProvider != null) serviceProxyItemProvider.dispose();
		if (usageProxyItemProvider != null) usageProxyItemProvider.dispose();
	}

}
