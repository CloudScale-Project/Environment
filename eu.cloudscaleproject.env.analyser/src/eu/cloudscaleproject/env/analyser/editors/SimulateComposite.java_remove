package eu.cloudscaleproject.env.analyser.editors;

import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.core.databinding.UpdateValueStrategy;
import org.eclipse.core.databinding.observable.value.IObservableValue;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.debug.core.DebugPlugin;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.ILaunchConfigurationType;
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
import org.eclipse.debug.core.ILaunchManager;
import org.eclipse.jface.databinding.swt.WidgetProperties;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;

import eu.cloudscaleproject.env.common.explorer.ExplorerProjectPaths;
import eu.cloudscaleproject.env.toolchain.editors.ProjectEditor;

public class SimulateComposite extends Composite {
	
	private Text textDataSetSource;
	private Text textMaxSimTime;
	private Text textMaxMeasureCount;
	private Text textConfidenceLevel;
	private Text textConfidenceInterval;
	private Text textMonitorElement;
	private Text textBatchSize;
	private Text textBatchesCount;
	private Button btnCheckStopOnConfidence;
	private Button btnCheckAutoBatchSize;
	private Button btnSelectModelElement;
	private Text textAnnotationFile;
	private Text textSensParam;
	private Text textSensParamMin;
	private Text textSensParamMax;
	private Text textSensParamStep;
	private Text textSeed0;
	private Text textSeed1;
	private Text textSeed2;
	private Text textSeed3;
	private Text textSeed4;
	private Text textSeed5;
	private Button btnAnalyseAccuracyInfluence;
	private Button btnBrowseWorkspace;
	private Button btnBrowseFileSystem;
	private Button btnBrowseDefault;
	private Button btnCheckFixedSeed;

	private final ProjectEditor editor;
	
	/**
	 * Create the composite.
	 * @param parent
	 * @param style
	 */
	public SimulateComposite(Composite parent, ProjectEditor projectEditor, int style) {
		super(parent, style);
		setLayout(new GridLayout(1, false));
				
		this.editor = projectEditor;
		
		Composite compositeSettings = new Composite(this, SWT.NONE);
		compositeSettings.setLayout(new GridLayout(2, false));
		GridData gd_compositeSettings = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_compositeSettings.heightHint = 92;
		compositeSettings.setLayoutData(gd_compositeSettings);
		
		CTabFolder tabFolder = new CTabFolder(compositeSettings, SWT.BORDER);
		tabFolder.setTabHeight(20);
		tabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		tabFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));
				
		CTabItem tabSimulation = new CTabItem(tabFolder, SWT.NONE);
		tabSimulation.setText("Simulation");
		
		ScrolledComposite scrolledCompositeSimulation = new ScrolledComposite(tabFolder, SWT.V_SCROLL);
		tabSimulation.setControl(scrolledCompositeSimulation);
		scrolledCompositeSimulation.setExpandHorizontal(true);
		scrolledCompositeSimulation.setExpandVertical(true);
		
		Composite compositeSimulation = new Composite(scrolledCompositeSimulation, SWT.NONE);
		compositeSimulation.setLayout(new GridLayout(1, false));
		
		Group grpDataSet = new Group(compositeSimulation, SWT.NONE);
		grpDataSet.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpDataSet.setText("Data set");
		grpDataSet.setLayout(new GridLayout(3, false));
		
		Label lblSource = new Label(grpDataSet, SWT.NONE);
		lblSource.setBounds(0, 0, 54, 11);
		lblSource.setText("Source:");
		
		textDataSetSource = new Text(grpDataSet, SWT.BORDER);
		textDataSetSource.setEditable(false);
		textDataSetSource.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		textDataSetSource.setBounds(0, 0, 351, 19);
		
		Button btnDatasetBrowse = new Button(grpDataSet, SWT.NONE);
		btnDatasetBrowse.setBounds(0, 0, 64, 15);
		btnDatasetBrowse.setText("browse...");
		
		Group grpStopConditions = new Group(compositeSimulation, SWT.NONE);
		grpStopConditions.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpStopConditions.setLayout(new GridLayout(2, false));
		grpStopConditions.setText("Stop conditions");
		
		Label lblMaxSimTime = new Label(grpStopConditions, SWT.NONE);
		lblMaxSimTime.setBounds(0, 0, 54, 11);
		lblMaxSimTime.setText("Maximum simulation time:");
		
		textMaxSimTime = new Text(grpStopConditions, SWT.BORDER);
		textMaxSimTime.setText("150000");
		textMaxSimTime.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblMaxMeasureCount = new Label(grpStopConditions, SWT.NONE);
		lblMaxMeasureCount.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblMaxMeasureCount.setBounds(0, 0, 54, 11);
		lblMaxMeasureCount.setText("Maximum measurements count:");
		
		textMaxMeasureCount = new Text(grpStopConditions, SWT.BORDER);
		textMaxMeasureCount.setText("10000");
		textMaxMeasureCount.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Group grpConfidenceStopCondition = new Group(compositeSimulation, SWT.NONE);
		grpConfidenceStopCondition.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpConfidenceStopCondition.setLayout(new GridLayout(3, false));
		grpConfidenceStopCondition.setText("Confidence stop condition");
		
		btnCheckStopOnConfidence = new Button(grpConfidenceStopCondition, SWT.CHECK);
		btnCheckStopOnConfidence.setText("Stop when reaching confidence");
		new Label(grpConfidenceStopCondition, SWT.NONE);
		new Label(grpConfidenceStopCondition, SWT.NONE);
		
		Label lblConfidenceLevel = new Label(grpConfidenceStopCondition, SWT.NONE);
		lblConfidenceLevel.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblConfidenceLevel.setBounds(0, 0, 54, 11);
		lblConfidenceLevel.setText("Confidence level (%):");
		
		textConfidenceLevel = new Text(grpConfidenceStopCondition, SWT.BORDER);
		textConfidenceLevel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
		
		Label lblConfidenceIntervalHalfwidth = new Label(grpConfidenceStopCondition, SWT.NONE);
		lblConfidenceIntervalHalfwidth.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblConfidenceIntervalHalfwidth.setText("Confidence interval half-width (%):");
		
		textConfidenceInterval = new Text(grpConfidenceStopCondition, SWT.BORDER);
		textConfidenceInterval.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
		
		Label lblMonitorResponseTime = new Label(grpConfidenceStopCondition, SWT.NONE);
		lblMonitorResponseTime.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblMonitorResponseTime.setText("Monitor response time of:");
		
		textMonitorElement = new Text(grpConfidenceStopCondition, SWT.BORDER);
		textMonitorElement.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		btnSelectModelElement = new Button(grpConfidenceStopCondition, SWT.NONE);
		btnSelectModelElement.setText("Select model element...");
		
		btnCheckAutoBatchSize = new Button(grpConfidenceStopCondition, SWT.CHECK);
		btnCheckAutoBatchSize.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 3, 1));
		btnCheckAutoBatchSize.setText("Automatically determine batch size (Beware: Manual batch size can lead to invalid resoults)");
		
		Label lblBatchSize = new Label(grpConfidenceStopCondition, SWT.NONE);
		lblBatchSize.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblBatchSize.setText("Batch size:");
		
		textBatchSize = new Text(grpConfidenceStopCondition, SWT.BORDER);
		textBatchSize.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
		
		Label lblMinNumBatches = new Label(grpConfidenceStopCondition, SWT.NONE);
		lblMinNumBatches.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblMinNumBatches.setText("Minimum number of batches:");
		
		textBatchesCount = new Text(grpConfidenceStopCondition, SWT.BORDER);
		textBatchesCount.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
		
		Group grpLogging = new Group(compositeSimulation, SWT.NONE);
		grpLogging.setLayout(new GridLayout(1, false));
		grpLogging.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpLogging.setText("Logging");
		
		Button btnEnableVerboseLogging = new Button(grpLogging, SWT.CHECK);
		btnEnableVerboseLogging.setBounds(0, 0, 93, 19);
		btnEnableVerboseLogging.setText("Enable verbose logging");
		scrolledCompositeSimulation.setContent(compositeSimulation);
		scrolledCompositeSimulation.setMinSize(compositeSimulation.computeSize(SWT.DEFAULT, SWT.DEFAULT));
		
		CTabItem tbtmAnalysis = new CTabItem(tabFolder, SWT.NONE);
		tbtmAnalysis.setText("Analysis");
		
		ScrolledComposite scrolledCompositeAnalysis = new ScrolledComposite(tabFolder, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		tbtmAnalysis.setControl(scrolledCompositeAnalysis);
		scrolledCompositeAnalysis.setExpandHorizontal(true);
		scrolledCompositeAnalysis.setExpandVertical(true);
		
		Composite compositeAnalysis = new Composite(scrolledCompositeAnalysis, SWT.NONE);
		compositeAnalysis.setLayout(new GridLayout(1, false));
		
		Group grpAccuracy = new Group(compositeAnalysis, SWT.NONE);
		grpAccuracy.setLayout(new GridLayout(5, false));
		grpAccuracy.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpAccuracy.setText("Accuracy influence analysis");
		
		btnAnalyseAccuracyInfluence = new Button(grpAccuracy, SWT.CHECK);
		btnAnalyseAccuracyInfluence.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 5, 1));
		btnAnalyseAccuracyInfluence.setText("Analyse accuracy influence");
		
		Label lblQualityAnnotationFile = new Label(grpAccuracy, SWT.NONE);
		lblQualityAnnotationFile.setText("Quality annotation file:");
		
		textAnnotationFile = new Text(grpAccuracy, SWT.BORDER);
		textAnnotationFile.setEditable(false);
		textAnnotationFile.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		textAnnotationFile.setBounds(0, 0, 73, 19);
		
		btnBrowseWorkspace = new Button(grpAccuracy, SWT.NONE);
		btnBrowseWorkspace.setBounds(0, 0, 64, 15);
		btnBrowseWorkspace.setText("Workspace...");
		
		btnBrowseFileSystem = new Button(grpAccuracy, SWT.NONE);
		btnBrowseFileSystem.setBounds(0, 0, 64, 15);
		btnBrowseFileSystem.setText("File system...");
		
		btnBrowseDefault = new Button(grpAccuracy, SWT.NONE);
		btnBrowseDefault.setBounds(0, 0, 64, 15);
		btnBrowseDefault.setText("Default");
		new Label(grpAccuracy, SWT.NONE);
		new Label(grpAccuracy, SWT.NONE);
		new Label(grpAccuracy, SWT.NONE);
		new Label(grpAccuracy, SWT.NONE);
		new Label(grpAccuracy, SWT.NONE);
		
		Group grpSensitivityParameters = new Group(compositeAnalysis, SWT.NONE);
		grpSensitivityParameters.setLayout(new GridLayout(3, false));
		grpSensitivityParameters.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpSensitivityParameters.setText("Sensitivity parameters");
		
		Label lblVariable = new Label(grpSensitivityParameters, SWT.NONE);
		lblVariable.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblVariable.setText("Variable:");
		
		textSensParam = new Text(grpSensitivityParameters, SWT.BORDER);
		textSensParam.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Button btnSensParamSelect = new Button(grpSensitivityParameters, SWT.NONE);
		btnSensParamSelect.setText("Select...");
		
		Composite compositeSensitivityMinMaxStep = new Composite(grpSensitivityParameters, SWT.NONE);
		compositeSensitivityMinMaxStep.setLayout(new GridLayout(6, false));
		compositeSensitivityMinMaxStep.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false, 3, 1));
		
		Label lblMinimum = new Label(compositeSensitivityMinMaxStep, SWT.NONE);
		lblMinimum.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblMinimum.setText("Minimum:");
		
		textSensParamMin = new Text(compositeSensitivityMinMaxStep, SWT.BORDER);
		textSensParamMin.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblMaximum = new Label(compositeSensitivityMinMaxStep, SWT.NONE);
		lblMaximum.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblMaximum.setText("Maximum:");
		
		textSensParamMax = new Text(compositeSensitivityMinMaxStep, SWT.BORDER);
		textSensParamMax.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblStepWidth = new Label(compositeSensitivityMinMaxStep, SWT.NONE);
		lblStepWidth.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblStepWidth.setText("Step width:");
		
		textSensParamStep = new Text(compositeSensitivityMinMaxStep, SWT.BORDER);
		textSensParamStep.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Group grpRandomNumberGenerator = new Group(compositeAnalysis, SWT.NONE);
		grpRandomNumberGenerator.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		grpRandomNumberGenerator.setText("Random number generator seed");
		grpRandomNumberGenerator.setLayout(new GridLayout(6, false));
		
		btnCheckFixedSeed = new Button(grpRandomNumberGenerator, SWT.CHECK);
		btnCheckFixedSeed.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
		btnCheckFixedSeed.setText("Use a fixed seed");
		
		Label lblSeed = new Label(grpRandomNumberGenerator, SWT.NONE);
		lblSeed.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblSeed.setText("Seed 0:");
		
		textSeed0 = new Text(grpRandomNumberGenerator, SWT.BORDER);
		textSeed0.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblSeed_1 = new Label(grpRandomNumberGenerator, SWT.NONE);
		lblSeed_1.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblSeed_1.setText("Seed 1:");
		
		textSeed1 = new Text(grpRandomNumberGenerator, SWT.BORDER);
		textSeed1.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblSeed_2 = new Label(grpRandomNumberGenerator, SWT.NONE);
		lblSeed_2.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblSeed_2.setText("Seed 2:");
		
		textSeed2 = new Text(grpRandomNumberGenerator, SWT.BORDER);
		textSeed2.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblSeed_3 = new Label(grpRandomNumberGenerator, SWT.NONE);
		lblSeed_3.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblSeed_3.setText("Seed 3:");
		
		textSeed3 = new Text(grpRandomNumberGenerator, SWT.BORDER);
		textSeed3.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblSeed_4 = new Label(grpRandomNumberGenerator, SWT.NONE);
		lblSeed_4.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblSeed_4.setText("Seed 4:");
		
		textSeed4 = new Text(grpRandomNumberGenerator, SWT.BORDER);
		textSeed4.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblSeed_5 = new Label(grpRandomNumberGenerator, SWT.NONE);
		lblSeed_5.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblSeed_5.setText("Seed 5:");
		
		textSeed5 = new Text(grpRandomNumberGenerator, SWT.BORDER);
		textSeed5.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		scrolledCompositeAnalysis.setContent(compositeAnalysis);
		scrolledCompositeAnalysis.setMinSize(compositeAnalysis.computeSize(SWT.DEFAULT, SWT.DEFAULT));
		
		tabFolder.setSelection(0);
		
		Composite composite = new Composite(this, SWT.NONE);
		composite.setLayout(new GridLayout(2, false));
		GridData gd_composite = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_composite.heightHint = 30;
		composite.setLayoutData(gd_composite);
		
		Button btnDebug = new Button(composite, SWT.NONE);
		GridData gd_btnDebug = new GridData(SWT.LEFT, SWT.CENTER, false, true, 1, 1);
		gd_btnDebug.widthHint = 100;
		btnDebug.setLayoutData(gd_btnDebug);
		btnDebug.setText("Debug...");
		
		Button btnRun = new Button(composite, SWT.NONE);
		GridData gd_btnRun = new GridData(SWT.LEFT, SWT.CENTER, false, true, 1, 1);
		gd_btnRun.widthHint = 100;
		btnRun.setLayoutData(gd_btnRun);
		btnRun.setText("Run...");
				
		btnCheckStopOnConfidence.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent e) {
				updateControls();
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnCheckAutoBatchSize.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent e) {
				updateControls();
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnRun.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(e.doit){
					try {
						ILaunchManager mgr = DebugPlugin.getDefault().getLaunchManager();
			
						IFolder genFolder = ExplorerProjectPaths.getProjectFolder(ExplorerProjectPaths.getProject(editor),
								ExplorerProjectPaths.KEY_FOLDER_GENERATED);
						IFile file = genFolder.getFile("analyser.launch");
						
						if(validate()){
							ILaunchConfiguration launchConf = mgr.getLaunchConfiguration(file);
							setParameters(launchConf);
							launchConf.getWorkingCopy().launch(ILaunchManager.RUN_MODE, new NullProgressMonitor());
						}
		
					} catch (CoreException e1) {
						e1.printStackTrace();
					}
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnDebug.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(e.doit){
					try {
						ILaunchManager mgr = DebugPlugin.getDefault().getLaunchManager();
			
						IFolder genFolder = ExplorerProjectPaths.getProjectFolder(ExplorerProjectPaths.getProject(editor),
								ExplorerProjectPaths.KEY_FOLDER_GENERATED);
						IFile file = genFolder.getFile("analyser.launch");
						
						if(validate()){
							ILaunchConfiguration launchConf = mgr.getLaunchConfiguration(file);
							setParameters(launchConf);
							launchConf.getWorkingCopy().launch(ILaunchManager.DEBUG_MODE, new NullProgressMonitor());
						}
								
					} catch (CoreException e1) {
						e1.printStackTrace();
					}
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		initLaunchConf();		
		initDataBindings();
	}
	
	private void updateControls(){
		if(btnCheckStopOnConfidence.getSelection()){
			textConfidenceLevel.setEnabled(true);
			textConfidenceInterval.setEnabled(true);
			textMonitorElement.setEnabled(true);
			
			btnCheckAutoBatchSize.setEnabled(true);
			
			if(btnCheckAutoBatchSize.getSelection()){
				textBatchesCount.setEnabled(false);
				textBatchSize.setEnabled(false);
			}
			else{
				textBatchSize.setEnabled(true);
				textBatchesCount.setEnabled(true);
			}
		}
		else{
			textConfidenceLevel.setEnabled(false);
			textConfidenceInterval.setEnabled(false);
			textMonitorElement.setEnabled(false);
			
			btnCheckAutoBatchSize.setEnabled(false);
			textBatchSize.setEnabled(false);
			textBatchesCount.setEnabled(false);
		}
	}
	
	private void initLaunchConf(){
		ILaunchManager mgr = DebugPlugin.getDefault().getLaunchManager();
		
		IFolder genFolder = ExplorerProjectPaths.getProjectFolder(ExplorerProjectPaths.getProject(editor),
				ExplorerProjectPaths.KEY_FOLDER_GENERATED);
		IFile file = genFolder.getFile("analyser.launch");
		
		if(!file.exists()){	
			try {
				ILaunchConfigurationType lct = mgr.getLaunchConfigurationType("de.uka.ipd.sdq.simucontroller.SimuLaunching");
				ILaunchConfigurationWorkingCopy lcw = lct.newInstance(genFolder, "analyser");
				lcw.doSave();
				
				ILaunchConfiguration launchConf = mgr.getLaunchConfiguration(file);
				setDefaults();
				setParameters(launchConf);
				validate();
				
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else{
			ILaunchConfiguration launchConf = mgr.getLaunchConfiguration(file);
			loadParameters(launchConf);
			validate();
		}
	}
	
	private void setDefaults(){
		textMaxSimTime.setText("15000");
		textMaxMeasureCount.setText("1000");
		
		textConfidenceLevel.setText("95");
		textConfidenceInterval.setText("10");
		textMonitorElement.setText("");
		btnCheckStopOnConfidence.setSelection(false);
		
		textBatchSize.setText("200");
		textBatchesCount.setText("60");
		btnCheckAutoBatchSize.setSelection(true);
		
		updateControls();
	}
	
	private void loadParameters(ILaunchConfiguration lc){
		try {
			ILaunchConfigurationWorkingCopy lcw = lc.getWorkingCopy();
			
			textMaxSimTime.setText(lcw.getAttribute("simTime", "15000"));
			textMaxMeasureCount.setText(lcw.getAttribute("maximumMeasurementCount", "1000"));
			
			btnCheckStopOnConfidence.setSelection(lcw.getAttribute("useConfidenceStopCondition", false));
			textConfidenceLevel.setText(lcw.getAttribute("confidenceLevel", "95"));
			textConfidenceInterval.setText(lcw.getAttribute("confidenceHalfWidth", "10"));
			textMonitorElement.setText(lcw.getAttribute("confidenceModelElementURI", ""));
			
			textBatchSize.setText(lcw.getAttribute("confidenceBatchSize", "200"));
			textBatchesCount.setText(lcw.getAttribute("confidenceMinNumberOfBatches", "60"));
			btnCheckAutoBatchSize.setSelection(lcw.getAttribute("confidenceUseAutomaticBatches", true));
			
			updateControls();
			
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	private void setParameters(ILaunchConfiguration lc){
		try {
			ILaunchConfigurationWorkingCopy lcw = lc.getWorkingCopy();
			
			lcw.setAttribute("accuracyQualityAnnotationFile", "");
			lcw.setAttribute("qualityAnnotationRepository", "");
			
			lcw.setAttribute("allocationFile", "platform:/resource/" 
					+ ExplorerProjectPaths.getProject(editor).getName() 
					+ "/Generated models/models/pcm.allocation");
			lcw.setAttribute("usageFile", "platform:/resource/" 
					+ ExplorerProjectPaths.getProject(editor).getName() 
					+ "/Generated models/models/pcm.usagemodel");

			lcw.setAttribute("clear", true);
			lcw.setAttribute("confidenceBatchSize", textBatchSize.getText());
			lcw.setAttribute("confidenceHalfWidth", textConfidenceInterval.getText());
			lcw.setAttribute("confidenceLevel", textConfidenceLevel.getText());
			
			lcw.setAttribute("confidenceMinNumberOfBatches", textBatchesCount.getText());
			lcw.setAttribute("confidenceModelElementName", "");
			lcw.setAttribute("confidenceModelElementURI", textMonitorElement.getText());
			lcw.setAttribute("confidenceUseAutomaticBatches", btnCheckAutoBatchSize.getSelection());
			
			lcw.setAttribute("datasourceID", 0);
			lcw.setAttribute("de.uka.ipd.sdq.workflowengine.debuglevel", 2);
			lcw.setAttribute("eventMiddlewareRepositoryFile", "pathmap://PCM_MODELS/default_event_middleware.repository");
			lcw.setAttribute("experimentRun", "MyRun");
			lcw.setAttribute("featureConfig", "pathmap://PCM_MODELS/ConnectorConfig.featureconfig");
			lcw.setAttribute("fixedSeed0", "0");
			lcw.setAttribute("fixedSeed1", "1");
			lcw.setAttribute("fixedSeed2", "2");
			lcw.setAttribute("fixedSeed3", "3");
			lcw.setAttribute("fixedSeed4", "4");
			lcw.setAttribute("fixedSeed5", "5");
			
			lcw.setAttribute("maximum", "");
			lcw.setAttribute("maximumMeasurementCount", textMaxMeasureCount.getText());
			lcw.setAttribute("minimum", "");
			lcw.setAttribute("mwRepositoryFile", "pathmap://PCM_MODELS/Glassfish.repository");
			lcw.setAttribute("outpath", "de.uka.ipd.sdq.temporary");
			
			
			lcw.setAttribute("persistenceFramework", "SensorFramework");
			lcw.setAttribute("simTime", textMaxSimTime.getText());
			
			lcw.setAttribute("simulateAccuracy", false);
			lcw.setAttribute("simulateFailures", false);
			lcw.setAttribute("simulateLinkingResources", false);
			
			lcw.setAttribute("simulatorId", "de.uka.ipd.sdq.codegen.simucontroller.simucom");
			lcw.setAttribute("stepwidth", "");
					
			lcw.setAttribute("useConfidenceStopCondition", btnCheckStopOnConfidence.getSelection());
			lcw.setAttribute("useFixedSeed", false);
			lcw.setAttribute("variable", "");
			lcw.setAttribute("verboseLogging", false);
			
			lcw.doSave();
			
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private boolean validate(){
		
		try{
			validateInt(textMaxSimTime);
			validateInt(textMaxMeasureCount);
			
			if(btnCheckStopOnConfidence.isEnabled()){

				validateInt(textConfidenceLevel);
				validateInt(textConfidenceInterval);

				validatePath(textMonitorElement);
				
				if(!btnCheckAutoBatchSize.isEnabled()){
					validateInt(textBatchSize);
					validateInt(textBatchesCount);
				}

			}
		}
		catch(NumberFormatException e){
			return false;
		}
		
		return true;
	}
	
	private int validateInt(Text text) throws NumberFormatException{
		
		try{
			int i = Integer.parseInt(text.getText());
			
			Display display = Display.getCurrent();
			Color white = display.getSystemColor(SWT.COLOR_WHITE);
			text.setBackground(white);
			
			return i;
		}
		catch(NumberFormatException e){
			Display display = Display.getCurrent();
			Color red = display.getSystemColor(SWT.COLOR_RED);
			text.setBackground(red);
			
			throw new NumberFormatException();
		}		
	}
	
	private void validatePath(Text text) throws IllegalArgumentException{
		
		
		try{
			text.getText();
		}
		catch(NumberFormatException e){
			Display display = Display.getCurrent();
			Color red = display.getSystemColor(SWT.COLOR_RED);
			text.setBackground(red);
			
			throw new IllegalArgumentException();
		}		
	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}

	protected DataBindingContext initDataBindings() {
		DataBindingContext bindingContext = new DataBindingContext();
		//
		IObservableValue observeEnabledBtnBrowseWorkspaceObserveWidget = WidgetProperties.enabled().observe(btnBrowseWorkspace);
		IObservableValue observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget_1 = WidgetProperties.selection().observe(btnAnalyseAccuracyInfluence);
		bindingContext.bindValue(observeEnabledBtnBrowseWorkspaceObserveWidget, observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget_1, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledBtnBrowseFileSystemObserveWidget = WidgetProperties.enabled().observe(btnBrowseFileSystem);
		IObservableValue observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget_2 = WidgetProperties.selection().observe(btnAnalyseAccuracyInfluence);
		bindingContext.bindValue(observeEnabledBtnBrowseFileSystemObserveWidget, observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget_2, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledBtnBrowseDefaultObserveWidget = WidgetProperties.enabled().observe(btnBrowseDefault);
		IObservableValue observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget_3 = WidgetProperties.selection().observe(btnAnalyseAccuracyInfluence);
		bindingContext.bindValue(observeEnabledBtnBrowseDefaultObserveWidget, observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget_3, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledTextSeed0ObserveWidget = WidgetProperties.enabled().observe(textSeed0);
		IObservableValue observeSelectionBtnCheckFixedSeedObserveWidget = WidgetProperties.selection().observe(btnCheckFixedSeed);
		bindingContext.bindValue(observeEnabledTextSeed0ObserveWidget, observeSelectionBtnCheckFixedSeedObserveWidget, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledTextSeed1ObserveWidget = WidgetProperties.enabled().observe(textSeed1);
		IObservableValue observeSelectionBtnCheckFixedSeedObserveWidget_1 = WidgetProperties.selection().observe(btnCheckFixedSeed);
		bindingContext.bindValue(observeEnabledTextSeed1ObserveWidget, observeSelectionBtnCheckFixedSeedObserveWidget_1, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledTextSeed2ObserveWidget = WidgetProperties.enabled().observe(textSeed2);
		IObservableValue observeSelectionBtnCheckFixedSeedObserveWidget_2 = WidgetProperties.selection().observe(btnCheckFixedSeed);
		bindingContext.bindValue(observeEnabledTextSeed2ObserveWidget, observeSelectionBtnCheckFixedSeedObserveWidget_2, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledTextSeed3ObserveWidget = WidgetProperties.enabled().observe(textSeed3);
		IObservableValue observeSelectionBtnCheckFixedSeedObserveWidget_3 = WidgetProperties.selection().observe(btnCheckFixedSeed);
		bindingContext.bindValue(observeEnabledTextSeed3ObserveWidget, observeSelectionBtnCheckFixedSeedObserveWidget_3, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledTextSeed4ObserveWidget = WidgetProperties.enabled().observe(textSeed4);
		IObservableValue observeSelectionBtnCheckFixedSeedObserveWidget_4 = WidgetProperties.selection().observe(btnCheckFixedSeed);
		bindingContext.bindValue(observeEnabledTextSeed4ObserveWidget, observeSelectionBtnCheckFixedSeedObserveWidget_4, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledTextSeed5ObserveWidget = WidgetProperties.enabled().observe(textSeed5);
		IObservableValue observeSelectionBtnCheckFixedSeedObserveWidget_5 = WidgetProperties.selection().observe(btnCheckFixedSeed);
		bindingContext.bindValue(observeEnabledTextSeed5ObserveWidget, observeSelectionBtnCheckFixedSeedObserveWidget_5, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		IObservableValue observeEnabledTextAnnotationFileObserveWidget = WidgetProperties.enabled().observe(textAnnotationFile);
		IObservableValue observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget = WidgetProperties.selection().observe(btnAnalyseAccuracyInfluence);
		bindingContext.bindValue(observeEnabledTextAnnotationFileObserveWidget, observeSelectionBtnAnalyseAccuracyInfluenceObserveWidget, new UpdateValueStrategy(UpdateValueStrategy.POLICY_NEVER), null);
		//
		return bindingContext;
	}
}
